{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAkEeA,MAhEf,SAAkBC,GAClB,MAAyBC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MACpD,IADN,mBAAMC,EAAN,KAAaC,EAAb,KAGMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAIrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAclB,OACE,sBAAMW,UAAU,YAAYC,SAZb,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAIP,SAEKL,EAAME,KACL,qCACA,uBACAoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,kBACVW,SAAUd,EACVe,IAAKpB,IAEL,wBAAQQ,UAAU,mBAAlB,uBAIA,qCACA,uBACIQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,IAEL,wBAAQQ,UAAU,cAAlB,4B,eCXDa,MAxCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WACjD,EAAuB9B,mBAAS,CAC5BgB,GAAG,KACHd,MAAO,KAFX,mBAAMD,EAAN,KAAY8B,EAAZ,KAaA,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QASJyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBACArB,UAAWoB,EAAKE,WAAa,oBAAqB,WADlD,UAKA,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAU,QAAf,UACE,cAAC,IAAD,CACAuB,QAAS,kBAAMP,EAAWI,EAAKjB,KAC/BH,UAAU,gBAEV,cAAC,IAAD,CAAQuB,QAAS,kBAAML,EAAQ,CAAEf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QAC1DP,UAAU,mBAZPqB,OCiCEG,MAxDf,WACG,MAAyBrC,mBAAS,IAAlC,mBAAM2B,EAAN,KAAaW,EAAb,KA6CC,OACI,gCACE,4DACA,cAAC,EAAD,CAAUxB,SA9CD,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OAwCN,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAdN,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,KAAOA,IACZiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAO0CZ,WAxBpC,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KAExDsB,EAASI,IAsBOZ,WArCD,SAACc,EAAQC,GACvBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCXxDC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACA,cAAC,EAAD,OCHJoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.770780be.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef } from 'react';\r\n\r\nfunction TodoForm(props) {\r\nconst[input, setInput] = useState(props.edit ? props.edit.value\r\n    : '');\r\n\r\nconst inputRef = useRef(null);\r\n\r\nuseEffect(() => {\r\n    inputRef.current.focus();\r\n});\r\n\r\n\r\nconst handleChange = e => {\r\n    setInput(e.target.value);\r\n};\r\n\r\nconst handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n        id: Math.floor(Math.random() * 10000),\r\n        text: input\r\n    });\r\n\r\n    setInput('');\r\n};\r\n\r\n    return (\r\n      <form className='todo-form' onSubmit={handleSubmit}>\r\n          \r\n          {props.edit ? (\r\n            <>\r\n            <input\r\n            type='text'\r\n            placeholder='Update your item' \r\n            value={input}\r\n            name=\"text\" \r\n            className='todo-input edit'\r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n            />\r\n            <button className='todo-button edit'>Update</button>\r\n            </>\r\n            ) :  \r\n            (\r\n            <>\r\n            <input\r\n                type='text'\r\n                placeholder='Add a todo' \r\n                value={input}\r\n                name=\"text\" \r\n                className='todo-input'\r\n                onChange={handleChange}\r\n                ref={inputRef}\r\n                />\r\n                <button className=\"todo-button\">Add todo</button>\r\n                </>\r\n                )\r\n            }\r\n\r\n          \r\n      </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\nconst[edit, setEdit] = useState({\r\n    id:null,\r\n    value: ''\r\n});\r\n\r\nconst submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n        id: null,\r\n        value: ''\r\n    });\r\n};\r\n\r\nif (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n}\r\n\r\n\r\n    return todos.map((todo, index) => (\r\n        <div \r\n        className={todo.isComplete ? 'todo-row complete' :'todo-row'} \r\n        key={index}\r\n        >\r\n\r\n        <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n            {todo.text}\r\n        </div>\r\n        <div className=\"icons\">\r\n          <RiCloseCircleLine \r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n          />\r\n          <TiEdit onClick={() => setEdit({ id: todo.id, value: todo.text})}\r\n          className='edit-icon'/>\r\n          </div>\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, {useState} from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction TodoList() {\r\n   const[todos, setTodos] = useState([]);\r\n\r\n   const addTodo = todo => {\r\n       if(!todo.text || /^\\s*$/.test(todo.text)) {\r\n           return;\r\n       }\r\n\r\n       const newTodos = [todo, ...todos];\r\n\r\n       setTodos(newTodos);\r\n   };\r\n\r\n   \r\n   const updateTodo = (todoId, newValue) => {\r\n    if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n        return;\r\n    }\r\n\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\r\n    );\r\n   };\r\n\r\n\r\n\r\n\r\n   const removeTodo = id => {\r\n       const removeArr = [...todos].filter(todo => todo.id !== id)\r\n\r\n       setTodos(removeArr);\r\n   };\r\n\r\n\r\n\r\n\r\n\r\n   const completeTodo = id => {\r\n       let updatedTodos = todos.map(todo => {\r\n           if (todo.id === id) {\r\n               todo.isComplete = !todo.isComplete;\r\n           }\r\n           return todo;\r\n       });\r\n       setTodos(updatedTodos);\r\n   }\r\n    \r\n    return (\r\n        <div>\r\n          <h1>What's the Plan for Today?</h1>\r\n          <TodoForm onSubmit={addTodo} />\r\n          <Todo todos={todos} completeTodo={completeTodo} removeTodo=\r\n          {removeTodo} updateTodo={updateTodo} />  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n    <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}